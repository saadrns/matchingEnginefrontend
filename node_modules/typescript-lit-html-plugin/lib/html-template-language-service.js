"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Original code forked from https://github.com/Quramy/ts-graphql-plugin
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript/lib/tsserverlibrary");
var vscode_html_languageservice_1 = require("vscode-html-languageservice");
var vscode = require("vscode-languageserver-types");
var HtmlTemplateLanguageService = /** @class */ (function () {
    function HtmlTemplateLanguageService(configuration, logger) {
        this.configuration = configuration;
        this.logger = logger;
    }
    Object.defineProperty(HtmlTemplateLanguageService.prototype, "htmlLanguageService", {
        get: function () {
            if (!this._htmlLanguageService) {
                this._htmlLanguageService = vscode_html_languageservice_1.getLanguageService();
            }
            return this._htmlLanguageService;
        },
        enumerable: true,
        configurable: true
    });
    HtmlTemplateLanguageService.prototype.getCompletionsAtPosition = function (context, position) {
        var doc = this.createVirtualDocument(context);
        var htmlDoc = this.htmlLanguageService.parseHTMLDocument(doc);
        var items = this.htmlLanguageService.doComplete(doc, position, htmlDoc);
        return translateCompletionItems(items);
    };
    HtmlTemplateLanguageService.prototype.getQuickInfoAtPosition = function (context, position) {
        var doc = this.createVirtualDocument(context);
        var htmlDoc = this.htmlLanguageService.parseHTMLDocument(doc);
        var hover = this.htmlLanguageService.doHover(doc, position, htmlDoc);
        if (hover) {
            return this.translateHover(hover, position, context);
        }
        return undefined;
    };
    HtmlTemplateLanguageService.prototype.getFormattingEditsForRange = function (context, start, end, settings) {
        var _this = this;
        if (!this.configuration.format.enabled) {
            return [];
        }
        var doc = this.createVirtualDocument(context);
        var htmlDoc = this.htmlLanguageService.parseHTMLDocument(doc);
        // Make sure we don't get rid of leading newline
        var leading = context.text.match(/^\s*\n/);
        if (leading) {
            start += leading[0].length;
        }
        // or any trailing newlines
        var trailing = context.text.match(/\n\s*$/);
        if (trailing) {
            end -= trailing[0].length;
        }
        var range = this.toVsRange(context, start, end);
        var edits = this.htmlLanguageService.format(doc, range, {
            tabSize: settings.tabSize,
            insertSpaces: !!settings.convertTabsToSpaces,
            wrapLineLength: 120,
            unformatted: '',
            contentUnformatted: 'pre,code,textarea',
            indentInnerHtml: false,
            preserveNewLines: true,
            maxPreserveNewLines: null,
            indentHandlebars: false,
            endWithNewline: false,
            extraLiners: 'head, body, /html',
            wrapAttributes: 'auto',
        });
        return edits.map(function (vsedit) {
            return {
                span: _this.toTsSpan(context, vsedit.range),
                newText: vsedit.newText,
            };
        });
    };
    HtmlTemplateLanguageService.prototype.toVsRange = function (context, start, end) {
        return {
            start: context.toPosition(start),
            end: context.toPosition(end),
        };
    };
    HtmlTemplateLanguageService.prototype.toTsSpan = function (context, range) {
        var editStart = context.toOffset(range.start);
        var editEnd = context.toOffset(range.end);
        return {
            start: editStart,
            length: editEnd - editStart,
        };
    };
    HtmlTemplateLanguageService.prototype.createVirtualDocument = function (context) {
        var contents = context.text;
        return {
            uri: 'untitled://embedded.html',
            languageId: 'html',
            version: 1,
            getText: function () { return contents; },
            positionAt: function (offset) {
                return context.toPosition(offset);
            },
            offsetAt: function (p) {
                return context.toOffset(p);
            },
            lineCount: contents.split(/n/g).length + 1,
        };
    };
    HtmlTemplateLanguageService.prototype.translateHover = function (hover, position, context) {
        var contents = [];
        var convertPart = function (hoverContents) {
            if (typeof hoverContents === 'string') {
                contents.push({ kind: 'unknown', text: hoverContents });
            }
            else if (Array.isArray(hoverContents)) {
                hoverContents.forEach(convertPart);
            }
            else {
                contents.push({ kind: 'unknown', text: hoverContents.value });
            }
        };
        convertPart(hover.contents);
        var start = context.toOffset(hover.range ? hover.range.start : position);
        return {
            kind: ts.ScriptElementKind.unknown,
            kindModifiers: '',
            textSpan: {
                start: start,
                length: hover.range ? context.toOffset(hover.range.end) - start : 1,
            },
            displayParts: [],
            documentation: contents,
            tags: [],
        };
    };
    return HtmlTemplateLanguageService;
}());
exports.default = HtmlTemplateLanguageService;
function translateCompletionItems(items) {
    return {
        isGlobalCompletion: false,
        isMemberCompletion: false,
        isNewIdentifierLocation: false,
        entries: items.items.map(translateCompetionEntry),
    };
}
function translateCompetionEntry(item) {
    return {
        name: item.label,
        kindModifiers: '',
        kind: item.kind ? translateionCompletionItemKind(item.kind) : ts.ScriptElementKind.unknown,
        sortText: '0',
    };
}
function translateionCompletionItemKind(kind) {
    switch (kind) {
        case vscode.CompletionItemKind.Method:
            return ts.ScriptElementKind.memberFunctionElement;
        case vscode.CompletionItemKind.Function:
            return ts.ScriptElementKind.functionElement;
        case vscode.CompletionItemKind.Constructor:
            return ts.ScriptElementKind.constructorImplementationElement;
        case vscode.CompletionItemKind.Field:
        case vscode.CompletionItemKind.Variable:
            return ts.ScriptElementKind.variableElement;
        case vscode.CompletionItemKind.Class:
            return ts.ScriptElementKind.classElement;
        case vscode.CompletionItemKind.Interface:
            return ts.ScriptElementKind.interfaceElement;
        case vscode.CompletionItemKind.Module:
            return ts.ScriptElementKind.moduleElement;
        case vscode.CompletionItemKind.Property:
            return ts.ScriptElementKind.memberVariableElement;
        case vscode.CompletionItemKind.Unit:
        case vscode.CompletionItemKind.Value:
            return ts.ScriptElementKind.constElement;
        case vscode.CompletionItemKind.Enum:
            return ts.ScriptElementKind.enumElement;
        case vscode.CompletionItemKind.Keyword:
            return ts.ScriptElementKind.keyword;
        case vscode.CompletionItemKind.Color:
            return ts.ScriptElementKind.constElement;
        case vscode.CompletionItemKind.Reference:
            return ts.ScriptElementKind.alias;
        case vscode.CompletionItemKind.File:
            return ts.ScriptElementKind.moduleElement;
        case vscode.CompletionItemKind.Snippet:
        case vscode.CompletionItemKind.Text:
        default:
            return ts.ScriptElementKind.unknown;
    }
}
function translateSeverity(severity) {
    switch (severity) {
        case vscode.DiagnosticSeverity.Information:
        case vscode.DiagnosticSeverity.Hint:
            return ts.DiagnosticCategory.Message;
        case vscode.DiagnosticSeverity.Warning:
            return ts.DiagnosticCategory.Warning;
        case vscode.DiagnosticSeverity.Error:
        default:
            return ts.DiagnosticCategory.Error;
    }
}
//# sourceMappingURL=html-template-language-service.js.map